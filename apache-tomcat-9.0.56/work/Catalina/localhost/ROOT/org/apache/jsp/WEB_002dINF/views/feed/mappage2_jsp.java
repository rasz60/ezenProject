/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.56
 * Generated at: 2022-03-23 04:22:33 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.feed;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class mappage2_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(6);
    _jspx_dependants.put("jar:file:/D:/project_init/apache-tomcat-9.0.56/wtpwebapps/project_init/WEB-INF/lib/jstl-1.2.jar!/META-INF/sql.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("jar:file:/D:/project_init/apache-tomcat-9.0.56/wtpwebapps/project_init/WEB-INF/lib/jstl-1.2.jar!/META-INF/x.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("jar:file:/D:/project_init/apache-tomcat-9.0.56/wtpwebapps/project_init/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1644909417825L));
    _jspx_dependants.put("jar:file:/D:/project_init/apache-tomcat-9.0.56/wtpwebapps/project_init/WEB-INF/lib/jstl-1.2.jar!/META-INF/fn.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("jar:file:/D:/project_init/apache-tomcat-9.0.56/wtpwebapps/project_init/WEB-INF/lib/jstl-1.2.jar!/META-INF/fmt.tld", Long.valueOf(1153352682000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, false, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("    \r\n");
      out.write("  \r\n");
      out.write(" \r\n");
      out.write("   \r\n");
      out.write("  \r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"ko\">\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n");
      out.write("<meta name=\"_csrf\" content=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${_csrf.token}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" />\r\n");
      out.write("<meta name=\"_csrf_header\" content=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${_csrf.headerName}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.6.1/dist/css/bootstrap.min.css\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.6.3/css/all.css\" integrity=\"sha384-UHRtZLI+pbxtHCWp1t77Bi1L4ZtiqrqD80Kn4Z8NTSRyMA2Fd33n5dQ8lWUE00s/\" crossorigin=\"anonymous\">\r\n");
      out.write("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\"></script>\r\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js\"></script>\r\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@4.6.1/dist/js/bootstrap.bundle.min.js\"></script>\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<style>\r\n");
      out.write("html, body {\r\n");
      out.write("	height: 100%;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("div.container {\r\n");
      out.write("	height: auto;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".planlist #mapbox {\r\n");
      out.write("	max-width: 100%;\r\n");
      out.write("	min-height: 800px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("<style>\r\n");
      out.write(".map_wrap, .map_wrap * {margin:0;padding:0;font-family:'Malgun Gothic',dotum,'돋움',sans-serif;font-size:12px;}\r\n");
      out.write(".map_wrap a, .map_wrap a:hover, .map_wrap a:active{color:#000;text-decoration: none;}\r\n");
      out.write(".map_wrap {position:relative;width:100%;height:500px;}\r\n");
      out.write("#menu_wrap {position:absolute;top:0;left:0;bottom:0;width:250px;margin:10px 0 30px 10px;padding:5px;overflow-y:auto;background:rgba(255, 255, 255, 0.7);z-index: 1;font-size:12px;border-radius: 10px;}\r\n");
      out.write(".bg_white {background:#fff;}\r\n");
      out.write("#menu_wrap hr {display: block; height: 1px;border: 0; border-top: 2px solid #5F5F5F;margin:3px 0;}\r\n");
      out.write("#menu_wrap .option{text-align: center;}\r\n");
      out.write("#menu_wrap .option p {margin:10px 0;}  \r\n");
      out.write("#menu_wrap .option button {margin-left:5px;}\r\n");
      out.write("#placesList li {list-style: none;}\r\n");
      out.write("#placesList .item {position:relative;border-bottom:1px solid #888;overflow: hidden;cursor: pointer;min-height: 65px;}\r\n");
      out.write("#placesList .item span {display: block;margin-top:4px;}\r\n");
      out.write("#placesList .item h5, #placesList .item .info {text-overflow: ellipsis;overflow: hidden;white-space: nowrap;}\r\n");
      out.write("#placesList .item .info{padding:10px 0 10px 55px;}\r\n");
      out.write("#placesList .info .gray {color:#8a8a8a;}\r\n");
      out.write("#placesList .info .jibun {padding-left:26px;background:url(https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/places_jibun.png) no-repeat;}\r\n");
      out.write("#placesList .info .tel {color:#009900;}\r\n");
      out.write("#placesList .item .markerbg {float:left;position:absolute;width:36px; height:37px;margin:10px 0 0 10px;background:url(https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_number_blue.png) no-repeat;}\r\n");
      out.write("#placesList .item .marker_1 {background-position: 0 -10px;}\r\n");
      out.write("#placesList .item .marker_2 {background-position: 0 -56px;}\r\n");
      out.write("#placesList .item .marker_3 {background-position: 0 -102px}\r\n");
      out.write("#placesList .item .marker_4 {background-position: 0 -148px;}\r\n");
      out.write("#placesList .item .marker_5 {background-position: 0 -194px;}\r\n");
      out.write("#placesList .item .marker_6 {background-position: 0 -240px;}\r\n");
      out.write("#placesList .item .marker_7 {background-position: 0 -286px;}\r\n");
      out.write("#placesList .item .marker_8 {background-position: 0 -332px;}\r\n");
      out.write("#placesList .item .marker_9 {background-position: 0 -378px;}\r\n");
      out.write("#placesList .item .marker_10 {background-position: 0 -423px;}\r\n");
      out.write("#placesList .item .marker_11 {background-position: 0 -470px;}\r\n");
      out.write("#placesList .item .marker_12 {background-position: 0 -516px;}\r\n");
      out.write("#placesList .item .marker_13 {background-position: 0 -562px;}\r\n");
      out.write("#placesList .item .marker_14 {background-position: 0 -608px;}\r\n");
      out.write("#placesList .item .marker_15 {background-position: 0 -654px;}\r\n");
      out.write("#pagination {margin:10px auto;text-align: center;}\r\n");
      out.write("#pagination a {display:inline-block;margin-right:10px;}\r\n");
      out.write("#pagination .on {font-weight: bold; cursor: default;color:#777;}\r\n");
      out.write("#removebtn{\r\n");
      out.write("margin-left : 20px;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("<script type=\"text/javascript\" src=\"//dapi.kakao.com/v2/maps/sdk.js?appkey=92b6b7355eb56122be94594a5e40e5fd&libraries=services\"></script>\r\n");
      out.write("<script type=\"text/javascript\" src=\"//dapi.kakao.com/v2/maps/sdk.js?appkey=92b6b7355eb56122be94594a5e40e5fd\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("$(document).ready(function() {\r\n");
      out.write("	let sdate = '");
      if (_jspx_meth_c_005fout_005f0(_jspx_page_context))
        return;
      out.write("';\r\n");
      out.write("	let edate = '");
      if (_jspx_meth_c_005fout_005f1(_jspx_page_context))
        return;
      out.write("';\r\n");
      out.write("	\r\n");
      out.write("	let sy = sdate.slice(0, 4);\r\n");
      out.write("	let sm = Number(sdate.slice(5, 7)) -1 ;\r\n");
      out.write("	let sd = sdate.slice(8);\r\n");
      out.write("	\r\n");
      out.write("	let ey = edate.slice(0, 4);\r\n");
      out.write("	let em = Number(edate.slice(5, 7)) -1;\r\n");
      out.write("	let ed = edate.slice(8);\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	let start = new Date(sy, sm, sd);\r\n");
      out.write("	let end = new Date(ey, em, ed);\r\n");
      out.write("	let date = new Date(start);\r\n");
      out.write("\r\n");
      out.write("	console.log(start + \" ~ \" + end);\r\n");
      out.write("	\r\n");
      out.write("	let dates = [start.toISOString().split('T')[0]];\r\n");
      out.write("	\r\n");
      out.write("	for (var i = 1; date < end; i ) {\r\n");
      out.write("		date.setDate(date.getDate() + i);\r\n");
      out.write("		dates.push(date.toISOString().split('T')[0]);\r\n");
      out.write("	};\r\n");
      out.write("	\r\n");
      out.write("	console.log(dates);\r\n");
      out.write("	\r\n");
      out.write("})\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<div class=\"container-fluid mt-2\">\r\n");
      out.write("<h3>DATE 1 : ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${plan.startDate }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</h3>\r\n");
      out.write("<hr/>\r\n");
      out.write("\r\n");
      out.write("<div class=\"planlist row\">\r\n");
      out.write("	<!-- 맵 생성 -->\r\n");
      out.write("	<div id=\"mapbox\" class=\"map_wrap col-6\">\r\n");
      out.write("		<div id=\"map\" style=\"width:100%;height:100%;position:relative;overflow:hidden;\"></div>\r\n");
      out.write("		<div id=\"menu_wrap\" class=\"bg_white\">\r\n");
      out.write("	    	<div class=\"option\">\r\n");
      out.write("	        	<div>\r\n");
      out.write("	            	<form onsubmit=\"searchPlaces(); return false;\">\r\n");
      out.write("	                	키워드 : <input type=\"text\" value=\"이태원 맛집\" id=\"keyword\" size=\"15\"> \r\n");
      out.write("	                	<button type=\"submit\">검색하기</button> \r\n");
      out.write("	            	</form>\r\n");
      out.write("	        	</div>\r\n");
      out.write("	    	</div>\r\n");
      out.write("	    	<hr>\r\n");
      out.write("	    	<ul id=\"placesList\"></ul>\r\n");
      out.write("	    	<div id=\"pagination\"></div>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("	\r\n");
      out.write("	<!-- input창 -->\r\n");
      out.write("	<div class=\"col-6\">\r\n");
      out.write("		<div>\r\n");
      out.write("			총 갯수 : <span id=\"showIndex\"></span> / 10\r\n");
      out.write("		</div>\r\n");
      out.write("		<button type=\"button\" id=\"insertButton\" class=\"btn btn-success\" style=\"float: right;\">추가</button>\r\n");
      out.write("			\r\n");
      out.write("		<form id=\"frm\" name=\"frm\" action=\"insertMap\" method=\"post\">	\r\n");
      out.write("			<input type=\"text\" id=\"index\" name=\"placecount\" value=\"\"/>\r\n");
      out.write("			<input type=\"text\" name=\"planNum\" id=\"planNum\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${plan.planNum}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" readonly/>\r\n");
      out.write("			<button type=\"submit\" id=\"submit\" class=\"btn btn-primary\" style=\"float: right;\">저장</button>   	    	    	\r\n");
      out.write("		</form>\r\n");
      out.write("		\r\n");
      out.write("		<!-- 저장 누를 시 생성되는 modal창 -->\r\n");
      out.write("		<div class=\"container\">\r\n");
      out.write("			<input id=\"modalBtn\" type=\"hidden\" class=\"btn btn-info btn-lg\" data-toggle=\"modal\" data-target=\"#myModal\" value=\"modal\"/>\r\n");
      out.write("			<!-- modal창 -->\r\n");
      out.write("			<div class=\"modal fade\" id=\"myModal\" role=\"dialog\">\r\n");
      out.write("				<div class=\"modal-dialog modal-dialog-centered modal-sm text-center\">\r\n");
      out.write("					<div class=\"modal-content\">\r\n");
      out.write("						<div class=\"modal-header bg-light\">\r\n");
      out.write("							<h4 class=\"modal-title\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;POST작성</h4>\r\n");
      out.write("						</div>\r\n");
      out.write("						<div class=\"modal-body bg-light\">\r\n");
      out.write("							<h4>작성되었습니다.</h4>\r\n");
      out.write("						</div>\r\n");
      out.write("						<div class=\"modal-footer bg-light\">\r\n");
      out.write("							<button id=\"closeBtn\" type=\"button\" class=\"btn btn-default btn-success\" data-dismiss=\"modal\">Close</button>\r\n");
      out.write("						</div>\r\n");
      out.write("					</div>\r\n");
      out.write("				</div>\r\n");
      out.write("			</div>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("\r\n");
      out.write("//latitude, longitude, placeName 값이 들어갈 input창 생성\r\n");
      out.write("$(document).ready(function (){\r\n");
      out.write("var Form = $(\"#frm\")\r\n");
      out.write("var index = 0    	\r\n");
      out.write(" $(\"#insertButton\").on(\"click\", function (){ \r\n");
      out.write("     if(index == 10){  // input창 생성 제한\r\n");
      out.write("        alert(\"10개 까지만 됩니다.\")\r\n");
      out.write("        return false;\r\n");
      out.write("    }\r\n");
      out.write("    \r\n");
      out.write("    var newDiv = document.createElement(\"div\")\r\n");
      out.write("    newDiv.setAttribute(\"class\", \"newDiv\")\r\n");
      out.write("    newDiv.setAttribute(\"name\", \"index\")\r\n");
      out.write("\r\n");
      out.write("    var newInput1 = document.createElement(\"input\") //위도 input\r\n");
      out.write("    newInput1.setAttribute(\"id\", \"latitude\"+index)\r\n");
      out.write("    newInput1.setAttribute(\"type\", \"text\")\r\n");
      out.write("    newInput1.setAttribute(\"name\", \"latitude\"+index)\r\n");
      out.write("    newInput1.setAttribute(\"value\", \"\")\r\n");
      out.write("    newInput1.setAttribute(\"readonly\", \"true\")\r\n");
      out.write("    var newInput2 = document.createElement(\"input\") //경도 input\r\n");
      out.write("    newInput2.setAttribute(\"id\", \"longitude\"+index)\r\n");
      out.write("    newInput2.setAttribute(\"type\", \"text\")\r\n");
      out.write("    newInput2.setAttribute(\"name\", \"longitude\"+index)\r\n");
      out.write("    newInput2.setAttribute(\"value\", \"\")\r\n");
      out.write("    newInput2.setAttribute(\"readonly\", \"true\")\r\n");
      out.write("    var newInput3 = document.createElement(\"input\") //장소명 input\r\n");
      out.write("    newInput3.setAttribute(\"id\", \"placeName\"+index)\r\n");
      out.write("    newInput3.setAttribute(\"type\", \"text\")\r\n");
      out.write("    newInput3.setAttribute(\"name\", \"placeName\"+index)\r\n");
      out.write("    newInput3.setAttribute(\"value\", \"\")\r\n");
      out.write("    newInput3.setAttribute(\"readonly\", \"true\")    \r\n");
      out.write("    var newInput4 = document.createElement(\"input\") //카테고리 input\r\n");
      out.write("    newInput4.setAttribute(\"id\", \"category\"+index)\r\n");
      out.write("    newInput4.setAttribute(\"type\", \"text\")\r\n");
      out.write("    newInput4.setAttribute(\"name\", \"category\"+index)\r\n");
      out.write("    newInput4.setAttribute(\"value\", \"\")\r\n");
      out.write("    newInput4.setAttribute(\"readonly\", \"true\")\r\n");
      out.write("    var newInput5 = document.createElement(\"input\") //카테고리 input\r\n");
      out.write("    newInput5.setAttribute(\"id\", \"address\"+index)\r\n");
      out.write("    newInput5.setAttribute(\"type\", \"text\")\r\n");
      out.write("    newInput5.setAttribute(\"name\", \"address\"+index)\r\n");
      out.write("    newInput5.setAttribute(\"value\", \"\")\r\n");
      out.write("    newInput5.setAttribute(\"readonly\", \"true\")\r\n");
      out.write("     \r\n");
      out.write("    var removeInput = document.createElement(\"button\") //삭제 버튼\r\n");
      out.write("    removeInput.setAttribute(\"type\", \"button\")\r\n");
      out.write("    removeInput.setAttribute(\"id\", \"removebtn\")\r\n");
      out.write("    removeInput.setAttribute(\"class\", \"btn btn-danger\")\r\n");
      out.write("    removeInput.textContent = \"삭제\"\r\n");
      out.write("	       	\r\n");
      out.write("    newDiv.append(newInput1)\r\n");
      out.write("	newDiv.append(newInput2)\r\n");
      out.write("    newDiv.append(newInput3)\r\n");
      out.write("    newDiv.append(newInput4)\r\n");
      out.write("    newDiv.append(newInput5)\r\n");
      out.write("    newDiv.append(removeInput)\r\n");
      out.write("    Form.append(newDiv)\r\n");
      out.write("    			\r\n");
      out.write("    index+=1\r\n");
      out.write("    console.log(newDiv);\r\n");
      out.write("    $(\"#showIndex\").text(index)\r\n");
      out.write("    $(\"#index\").val(index)\r\n");
      out.write("}) \r\n");
      out.write("\r\n");
      out.write("$(document).on(\"click\", \"#removebtn\", function () { // 삭제\r\n");
      out.write("    $(this).parent(\".newDiv\").remove()\r\n");
      out.write("    resetIndex()\r\n");
      out.write("})\r\n");
      out.write("\r\n");
      out.write("function resetIndex(){ //삭제하면 인덱스 번호도 reset \r\n");
      out.write("    index = 0\r\n");
      out.write("    Form.children('div').each(function (){\r\n");
      out.write("        var target = $(this).children(index)\r\n");
      out.write("        target.attr(\"id\", target.attr(\"latitude\"+index))\r\n");
      out.write("        target.attr(\"id\", target.attr(\"longitude\"+index))\r\n");
      out.write("        target.attr(\"id\", target.attr(\"placeName\"+index))\r\n");
      out.write("        target.attr(\"id\", target.attr(\"category\"+index))\r\n");
      out.write("        target.attr(\"id\", target.attr(\"address\"+index))\r\n");
      out.write("        index+=1\r\n");
      out.write("    })\r\n");
      out.write("    $(\"#showIndex\").text(index)\r\n");
      out.write("    $(\"#index\").val(index)\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("$(\"#insertButton\").trigger(\"click\") // 추가 버튼\r\n");
      out.write("$(\"#showIndex\").text(index)       	\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("$(document).ready(function(){ \r\n");
      out.write("$(\"#frm\").submit(function(event){ //#frm의 data 전체를 ajax로 서버에 보내기\r\n");
      out.write("	event.preventDefault(); //원래 form의 기능인 submit를 ajax로 처리\r\n");
      out.write("	$.ajax({\r\n");
      out.write("		type : $(\"#frm\").attr(\"method\"),\r\n");
      out.write("		url : $(\"#frm\").attr(\"action\"),\r\n");
      out.write("		data : $(\"#frm\").serialize(),\r\n");
      out.write("	    beforeSend: function(xhr){\r\n");
      out.write(" 		   	var token = $(\"meta[name='_csrf']\").attr('content');\r\n");
      out.write(" 			var header = $(\"meta[name='_csrf_header']\").attr('content');\r\n");
      out.write("		        xhr.setRequestHeader(header, token);\r\n");
      out.write("		},\r\n");
      out.write("		success : function(data){\r\n");
      out.write("			console.log(data);\r\n");
      out.write("			if(data.search(\"insert-success\") > -1){\r\n");
      out.write("				$(\".modal-body\").text(\"작성되었습니다.\");\r\n");
      out.write("				$(\"#modalBtn\").trigger(\"click\");\r\n");
      out.write("					$(\"#closeBtn\").click(function(event){\r\n");
      out.write("					event.preventDefault();\r\n");
      out.write("					location.href = \"/feed\"; // 성공시 이동 페이지\r\n");
      out.write("				});\r\n");
      out.write("			}\r\n");
      out.write("			else{\r\n");
      out.write("				$(\".modal-body\").text(\"다시입력해주세요\");\r\n");
      out.write("				$(\"#modalBtn\").trigger(\"click\");\r\n");
      out.write("					$(\"#closeBtn\").click(function(event){\r\n");
      out.write("					event.preventDefault();\r\n");
      out.write("					location.href = \"mappage\"; //실패시 이동 페이지 \r\n");
      out.write("				});\r\n");
      out.write("			}\r\n");
      out.write("		},\r\n");
      out.write("		error : function(data){\r\n");
      out.write("			$(\".modal-body\").text(\"다시입력해주세요\");\r\n");
      out.write("			$(\"#modalBtn\").trigger(\"click\");\r\n");
      out.write("				$(\"#closeBtn\").click(function(event){\r\n");
      out.write("				event.preventDefault();\r\n");
      out.write("				location.href = \"mappage\"; //실패시 이동 페이지\r\n");
      out.write("			});\r\n");
      out.write("		}			\r\n");
      out.write("	});\r\n");
      out.write("});\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("//마커를 담을 배열입니다\r\n");
      out.write("var markers = [];\r\n");
      out.write("\r\n");
      out.write("var mapContainer = document.getElementById('map'), // 지도를 표시할 div \r\n");
      out.write("mapOption = {\r\n");
      out.write("    center: new kakao.maps.LatLng(37.566826, 126.9786567), // 지도의 중심좌표\r\n");
      out.write("    level: 3 // 지도의 확대 레벨\r\n");
      out.write("};  \r\n");
      out.write("\r\n");
      out.write("//지도를 생성합니다    \r\n");
      out.write("var map = new kakao.maps.Map(mapContainer, mapOption); \r\n");
      out.write("\r\n");
      out.write("//장소 검색 객체를 생성합니다\r\n");
      out.write("var ps = new kakao.maps.services.Places();  \r\n");
      out.write("\r\n");
      out.write("//검색 결과 목록이나 마커를 클릭했을 때 장소명을 표출할 인포윈도우를 생성합니다\r\n");
      out.write("var infowindow = new kakao.maps.InfoWindow({zIndex:1});\r\n");
      out.write("\r\n");
      out.write("//키워드로 장소를 검색합니다\r\n");
      out.write("searchPlaces();\r\n");
      out.write("\r\n");
      out.write("//키워드 검색을 요청하는 함수입니다\r\n");
      out.write("function searchPlaces() {\r\n");
      out.write("\r\n");
      out.write("var keyword = document.getElementById('keyword').value;\r\n");
      out.write("\r\n");
      out.write("if (!keyword.replace(/^\\s+|\\s+$/g, '')) {\r\n");
      out.write("    alert('키워드를 입력해주세요!');\r\n");
      out.write("    return false;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 장소검색 객체를 통해 키워드로 장소검색을 요청합니다\r\n");
      out.write("ps.keywordSearch( keyword, placesSearchCB); \r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("//장소검색이 완료됐을 때 호출되는 콜백함수 입니다\r\n");
      out.write("function placesSearchCB(data, status, pagination) {\r\n");
      out.write("if (status === kakao.maps.services.Status.OK) {\r\n");
      out.write("	  	\r\n");
      out.write("    // 정상적으로 검색이 완료됐으면\r\n");
      out.write("    // 검색 목록과 마커를 표출합니다\r\n");
      out.write("    displayPlaces(data);\r\n");
      out.write("	\r\n");
      out.write("    // 페이지 번호를 표출합니다\r\n");
      out.write("    displayPagination(pagination);\r\n");
      out.write("\r\n");
      out.write("} else if (status === kakao.maps.services.Status.ZERO_RESULT) {\r\n");
      out.write("\r\n");
      out.write("    alert('검색 결과가 존재하지 않습니다.');\r\n");
      out.write("    return;\r\n");
      out.write("\r\n");
      out.write("} else if (status === kakao.maps.services.Status.ERROR) {\r\n");
      out.write("\r\n");
      out.write("    alert('검색 결과 중 오류가 발생했습니다.');\r\n");
      out.write("    return;\r\n");
      out.write("\r\n");
      out.write("}\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("//검색 결과 목록과 마커를 표출하는 함수입니다\r\n");
      out.write("function displayPlaces(places) {\r\n");
      out.write("\r\n");
      out.write("console.log(places);\r\n");
      out.write("\r\n");
      out.write("var listEl = document.getElementById('placesList'), \r\n");
      out.write("menuEl = document.getElementById('menu_wrap'),\r\n");
      out.write("fragment = document.createDocumentFragment(), //새로운 빈 DocumentFragment 를 생성합니다. DocumentFragment 인터페이스는 부모가 없는 아주 작은 document 객체를 나타냅니다. \r\n");
      out.write("bounds = new kakao.maps.LatLngBounds(), //LatLngBounds - WGS84 좌표계에서 사각영역 정보를 표현하는 객체를 생성한다.\r\n");
      out.write("										//WGS84 좌표계는 지심 좌표계인데 이것은 지구 타원체의 중심을 원점으로 하고 X, Y ,Z 방향의 축을 따라 좌표를 결정\r\n");
      out.write("listStr = '';\r\n");
      out.write("\r\n");
      out.write("// 검색 결과 목록에 추가된 항목들을 제거합니다\r\n");
      out.write("removeAllChildNods(listEl);\r\n");
      out.write("\r\n");
      out.write("// 지도에 표시되고 있는 마커를 제거합니다\r\n");
      out.write("removeMarker();\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("for ( var i=0; i<places.length; i++ ) {\r\n");
      out.write("\r\n");
      out.write("    // 마커를 생성하고 지도에 표시합니다\r\n");
      out.write("    var placePosition = new kakao.maps.LatLng(places[i].y, places[i].x), //LatLng - WGS84 좌표 정보를 가지고 있는 객체를 생성한다.\r\n");
      out.write("        marker = addMarker(placePosition, i), \r\n");
      out.write("        itemEl = getListItem(i, places[i]); // 검색 결과 항목 Element를 생성합니다\r\n");
      out.write("    \r\n");
      out.write("    var category = places[i].category_name; //카테고리 정보를 가지고 있는 객체 생성 \r\n");
      out.write("    var address = places[i].address_name; // 도로명 주소 정보를 가지고 있는 객체 생성\r\n");
      out.write("    console.log(address);\r\n");
      out.write("    // 검색된 장소 위치를 기준으로 지도 범위를 재설정하기위해\r\n");
      out.write("    // LatLngBounds 객체에 좌표를 추가합니다\r\n");
      out.write("    bounds.extend(placePosition); //extend() - 다수의 객체를 하나의 객체로 합치는 merge기능을 수행\r\n");
      out.write("    \r\n");
      out.write("    // 마커와 검색결과 항목에 click 했을때\r\n");
      out.write("    // 해당 장소에 인포윈도우에 장소명을 표시합니다\r\n");
      out.write("    (function(marker, title, category, address) {\r\n");
      out.write("    	//addListener(target, type, handler) - 다음 지도 API 객체에 이벤트를 등록한다. \r\n");
      out.write("    	//target : 이벤트를 지원하는 다음 지도 API 객체, type : 이벤트 이름, handler : 이벤트를 처리할 함수\r\n");
      out.write("    	\r\n");
      out.write("    	kakao.maps.event.addListener(marker, 'mouseover', function() { //마커에 마우스 올렸을 때\r\n");
      out.write("            displayInfowindow(marker, title); // displayInfowindow()에서 처리\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        kakao.maps.event.addListener(marker, 'mouseout', function() { // 마커에 마우스 치웠을 때 인포창 닫기\r\n");
      out.write("            infowindow.close();\r\n");
      out.write("        });\r\n");
      out.write("        \r\n");
      out.write("        itemEl.onmouseover =  function () { //검색목록에 마우스 올렸을 때\r\n");
      out.write("            displayInfowindow(marker, title); // displayInfowindow()에서 처리\r\n");
      out.write("        };\r\n");
      out.write("\r\n");
      out.write("        itemEl.onmouseout =  function () { // 검색목록에 마우스 치웠을 때 인포창 닫기\r\n");
      out.write("            infowindow.close();\r\n");
      out.write("        };\r\n");
      out.write("    	        	\r\n");
      out.write("        kakao.maps.event.addListener(marker, 'click', function() { // 마커 클릭 시 \r\n");
      out.write("        	inputdata(marker, title, category, address); // inputdata()에서 처리            	\r\n");
      out.write("        });\r\n");
      out.write("    	                     \r\n");
      out.write("        itemEl.onclick =  function () { // 검색 목록창 클릭 시\r\n");
      out.write("        	inputdata(marker, title, category, address); // inputdata()에서 처리                \r\n");
      out.write("        }; \r\n");
      out.write("    })(marker, places[i].place_name, places[i].category_name, places[i].address_name);\r\n");
      out.write("\r\n");
      out.write("    fragment.appendChild(itemEl); //appendChild() - 새로운 노드를 해당 노드의 자식 노드 리스트(child node list)의 맨 마지막에 추가        \r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 검색결과 항목들을 검색결과 목록 Element에 추가합니다\r\n");
      out.write("listEl.appendChild(fragment);\r\n");
      out.write("menuEl.scrollTop = 0; //scrollTop - 현재 스크롤의 위치값\r\n");
      out.write("\r\n");
      out.write("// 검색된 장소 위치를 기준으로 지도 범위를 재설정합니다\r\n");
      out.write("map.setBounds(bounds); //setBounds() - 주어진 영역이 화면 안에 전부 나타날 수 있도록 지도의 중심 좌표와 확대 수준을 설정한다.\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("//검색결과 항목을 Element로 반환하는 함수입니다\r\n");
      out.write("function getListItem(index, places) {\r\n");
      out.write("\r\n");
      out.write("var el = document.createElement('li'),\r\n");
      out.write("itemStr = '<span class=\"markerbg marker_' + (index+1) + '\"></span>' +\r\n");
      out.write("            '<div class=\"info\">' +\r\n");
      out.write("            '   <h5>' + places.place_name + '</h5>';\r\n");
      out.write("\r\n");
      out.write("        	             \r\n");
      out.write("            \r\n");
      out.write("if (places.road_address_name) {\r\n");
      out.write("    itemStr += '    <span>' + places.road_address_name + '</span>' +\r\n");
      out.write("                '   <span class=\"jibun gray\">' +  places.address_name  + '</span>';\r\n");
      out.write("} else {\r\n");
      out.write("    itemStr += '    <span>' +  places.address_name  + '</span>'; \r\n");
      out.write("}                 \r\n");
      out.write("  itemStr += '  <span class=\"tel\">' + places.phone  + '</span>' +\r\n");
      out.write("            '</div>';       \r\n");
      out.write("            \r\n");
      out.write("el.innerHTML = itemStr;\r\n");
      out.write("el.className = 'item';\r\n");
      out.write("\r\n");
      out.write("return el;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("//마커를 생성하고 지도 위에 마커를 표시하는 함수입니다\r\n");
      out.write("function addMarker(position, idx, title) {\r\n");
      out.write("var imageSrc = 'https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_number_blue.png', // 마커 이미지 url, 스프라이트 이미지를 씁니다\r\n");
      out.write("    imageSize = new kakao.maps.Size(36, 37),  // 마커 이미지의 크기\r\n");
      out.write("    imgOptions =  {\r\n");
      out.write("        spriteSize : new kakao.maps.Size(36, 691), // 스프라이트 이미지의 크기\r\n");
      out.write("        spriteOrigin : new kakao.maps.Point(0, (idx*46)+10), // 스프라이트 이미지 중 사용할 영역의 좌상단 좌표\r\n");
      out.write("        offset: new kakao.maps.Point(13, 37) // 마커 좌표에 일치시킬 이미지 내에서의 좌표\r\n");
      out.write("    },\r\n");
      out.write("    markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize, imgOptions),\r\n");
      out.write("        marker = new kakao.maps.Marker({\r\n");
      out.write("        position: position, // 마커의 위치\r\n");
      out.write("        image: markerImage \r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("marker.setMap(map); // 지도 위에 마커를 표출합니다\r\n");
      out.write("markers.push(marker);  // 배열에 생성된 마커를 추가합니다\r\n");
      out.write("\r\n");
      out.write("return marker;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("//지도 위에 표시되고 있는 마커를 모두 제거합니다\r\n");
      out.write("function removeMarker() {\r\n");
      out.write("for ( var i = 0; i < markers.length; i++ ) {\r\n");
      out.write("    markers[i].setMap(null);\r\n");
      out.write("}   \r\n");
      out.write("markers = [];\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("//검색결과 목록 하단에 페이지번호를 표시는 함수입니다\r\n");
      out.write("function displayPagination(pagination) {\r\n");
      out.write("var paginationEl = document.getElementById('pagination'),\r\n");
      out.write("    fragment = document.createDocumentFragment(),\r\n");
      out.write("    i; \r\n");
      out.write("\r\n");
      out.write("// 기존에 추가된 페이지번호를 삭제합니다\r\n");
      out.write("while (paginationEl.hasChildNodes()) { //Node.hasChildNodes() - 현재 노드(Node)에게 자식노드(child nodes)가 있는지를 Boolean 값으로 반환\r\n");
      out.write("    paginationEl.removeChild (paginationEl.lastChild); //removeChild() - DOM에서 자식 노드를 제거하고 제거된 노드를 반환\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("for (i=1; i<=pagination.last; i++) {\r\n");
      out.write("    var el = document.createElement('a');\r\n");
      out.write("    el.href = \"#\";\r\n");
      out.write("    el.innerHTML = i;\r\n");
      out.write("\r\n");
      out.write("    if (i===pagination.current) {\r\n");
      out.write("        el.className = 'on';\r\n");
      out.write("    } else {\r\n");
      out.write("        el.onclick = (function(i) {\r\n");
      out.write("            return function() {\r\n");
      out.write("                pagination.gotoPage(i);\r\n");
      out.write("            }\r\n");
      out.write("        })(i);\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    fragment.appendChild(el);\r\n");
      out.write("}\r\n");
      out.write("paginationEl.appendChild(fragment);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("//검색결과 목록 또는 마커에 마우스 올렸을 때 호출되는 함수입니다\r\n");
      out.write("//인포윈도우에 장소명을 표시합니다\r\n");
      out.write("function displayInfowindow(marker, title) {\r\n");
      out.write("var content = '<div style=\"padding:5px;z-index:1;\">' + title + '</div>';\r\n");
      out.write("\r\n");
      out.write("infowindow.setContent(content);\r\n");
      out.write("infowindow.open(map, marker);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("//마커와 검색결과 목록 클릭 시 input에 data 입력\r\n");
      out.write("//input에 insert하기 위한 index번호 생성\r\n");
      out.write("var index = 0\r\n");
      out.write("function inputdata(marker, title, category, address) {\r\n");
      out.write("\r\n");
      out.write("$('#address'+index).val(address);\r\n");
      out.write("$('#category'+index).val(category);\r\n");
      out.write("$('#latitude'+index).val(marker.getPosition().getLat());\r\n");
      out.write("$('#longitude'+index).val(marker.getPosition().getLng());\r\n");
      out.write("$('#placeName'+index).val(title);\r\n");
      out.write("index += 1 //index 번호 장소 선택 마다 1씩증가\r\n");
      out.write("\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 검색결과 목록의 자식 Element를 제거하는 함수입니다\r\n");
      out.write("function removeAllChildNods(el) {   \r\n");
      out.write("while (el.hasChildNodes()) {\r\n");
      out.write("    el.removeChild (el.lastChild);\r\n");
      out.write("}\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fout_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:out
    org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f0 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
    boolean _jspx_th_c_005fout_005f0_reused = false;
    try {
      _jspx_th_c_005fout_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f0.setParent(null);
      // /WEB-INF/views/feed/mappage2.jsp(86,14) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f0.setValue((java.lang.Object) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${plan.startDate}", java.lang.Object.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      int _jspx_eval_c_005fout_005f0 = _jspx_th_c_005fout_005f0.doStartTag();
      if (_jspx_th_c_005fout_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f0);
      _jspx_th_c_005fout_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fout_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fout_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fout_005f1(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:out
    org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f1 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
    boolean _jspx_th_c_005fout_005f1_reused = false;
    try {
      _jspx_th_c_005fout_005f1.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f1.setParent(null);
      // /WEB-INF/views/feed/mappage2.jsp(87,14) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f1.setValue((java.lang.Object) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${plan.endDate}", java.lang.Object.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      int _jspx_eval_c_005fout_005f1 = _jspx_th_c_005fout_005f1.doStartTag();
      if (_jspx_th_c_005fout_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f1);
      _jspx_th_c_005fout_005f1_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fout_005f1, _jsp_getInstanceManager(), _jspx_th_c_005fout_005f1_reused);
    }
    return false;
  }
}
